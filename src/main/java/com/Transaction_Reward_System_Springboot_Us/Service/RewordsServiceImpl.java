package com.Transaction_Reward_System_Springboot_Us.Service;

import com.Transaction_Reward_System_Springboot_Us.Entity.Rewords;
import com.Transaction_Reward_System_Springboot_Us.Exception.CustomerNotFoundException;
import com.Transaction_Reward_System_Springboot_Us.Exception.FailedToGetRewordSummeryForLastThreeMonth;
import com.Transaction_Reward_System_Springboot_Us.Exception.RewordTransactionNotFound;
import com.Transaction_Reward_System_Springboot_Us.Exception.TransactionFailed;
import com.Transaction_Reward_System_Springboot_Us.Models.RewordSummeryByCustomer;
import com.Transaction_Reward_System_Springboot_Us.Repository.RewordsRepo;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@Service
public class RewordsServiceImpl implements RewordOperations {

    //Autowiring the Rewords repository.
    @Autowired
    private RewordsRepo repo;

    //Logger Implementation
    private static final Logger loggerRewordService = LoggerFactory.getLogger(RewordsServiceImpl.class);

    //Constructor for the class
    public RewordsServiceImpl(RewordsRepo rewordsRepo) {
    }



    /*
    Method for the calculation for the list of rewords by CustomerID.
     */
    @Override
    public List<Rewords> findByCustomerId(Long CustomerId) {
        return repo.findByCustomerId(CustomerId);
    }



    /*
    Method to add reword in table with given customer id in body and transactionId autogenerated.
     */
    public Rewords addRewordPoints(Rewords rewords) {
        Rewords savedReword=null;
        try {
            loggerRewordService.info("Adding reword at service level "+ rewords);
            rewords.setRewordPoints(calculateRewordsPoints(rewords.getTransactionAmount()));
            rewords.setDate(LocalDate.now());
            System.out.print(rewords.toString());
            savedReword=repo.save(rewords);
            loggerRewordService.info("Adding reword at service level Completed"+ rewords);

        } catch (Exception e) {
            loggerRewordService.warn("Exception While Adding reword at service level "+ rewords);
            throw new TransactionFailed("Adding Rewords Tranzation Failed");
        }
        return savedReword;
    }



    /*
    Method for the calculation for the reword points by transactionId/RewordId.
     */
    @Override
    public Rewords getRewordPoints(Integer rewordId) {
        Rewords getRewordsById=null;
        try {
            loggerRewordService.info("Getting rewords by Id {}", rewordId);
            getRewordsById= repo.getById(rewordId);
            loggerRewordService.info("Getting rewords by Id {}Completed", rewordId);

            return  getRewordsById;
        }
        catch (Exception e ){
            loggerRewordService.info("Exception While Getting rewords by Id "+ rewordId);
            throw new RewordTransactionNotFound("No Reword Transaction Found");
        }
    }



    /*
     Method for the calculation for the reword Summery points by Customer ID.
    */
    @Override
    public RewordSummeryByCustomer findRewordSummeryMonthlyByCustomerId(Long customerId) {
        RewordSummeryByCustomer summery = new RewordSummeryByCustomer();
        List<Rewords> allrewords=null;
        try
        {
            loggerRewordService.info("Getting rewords by CustomerId By Month And Total  "+ customerId);
            long totalPoints= 0L;

          try {
               allrewords = repo.findByCustomerId(customerId);
          }
          catch (CustomerNotFoundException e){
              System.out.println(e.getMessage());
          }

            assert allrewords != null;
            if (allrewords.isEmpty())
            {
                throw new  CustomerNotFoundException("No Customer with the id "+customerId);
            }

            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM");
            totalPoints=allrewords.stream().mapToLong(Rewords::getRewordPoints).sum();
            summery.setTotalSumOfAllRewards(totalPoints);
            Map<String, Integer>RewordsByMonth = allrewords.stream().collect(Collectors.groupingBy(rewords->rewords.getDate().format(formatter),Collectors.summingInt(s-> Math.toIntExact(s.getRewordPoints()))));

            summery.setCustomerId(repo.findByCustomerId(customerId).get(0).getCustomerId());
            summery.setCustomerName(repo.findByCustomerId(customerId).get(0).getCustomerName());
            summery.setRewordPoints(RewordsByMonth);

            loggerRewordService.info("Getting rewords by CustomerId By Month And Total  "+ customerId+"Completed");
            return summery;

        } catch (Exception e) {
            loggerRewordService.warn("Exception while Getting rewords by CustomerId By Month And Total  "+ customerId);
            throw new RuntimeException(e);
        }

    }



    /*
    Method for the calculation for the reword points by transaction amount.
     */
    private static Long calculateRewordsPoints(Double amount) {
        long calculated_Reword_Points = 0;
        try {
            loggerRewordService.info("Getting rewords Calculated By Amount "+ amount + "Started");
            long tranzation_amount = Math.round(amount);

            if (tranzation_amount > 100) {
                calculated_Reword_Points += (tranzation_amount - 100) * 2 + (50);
            } else if (tranzation_amount > 50 && tranzation_amount < 100) {
                calculated_Reword_Points = (tranzation_amount - 50);
            } else {
               return calculated_Reword_Points;
            }

            loggerRewordService.info("Getting rewords Calculated By Amount "+ amount + "Completed");

        }
        catch(Exception e){
            loggerRewordService.warn("Exception caught rewords Calculated By Amount "+ amount + "Started");
            throw e;
        }

        return calculated_Reword_Points;
    }



    /*
    Below method gives summery of rewords for Last 3 Month date range using method rewordSummeryMonthly;
     */
    public List<RewordSummeryByCustomer> getRewordSummeryForLastThreeMonth() {
       List<RewordSummeryByCustomer> all_Customer_RewordSummery_LastThreeMonths = new ArrayList<>();;
        try {
            LocalDate EndDate = LocalDate.now();
            LocalDate StartDate = EndDate.minusMonths(3);
            List<Rewords> RewordOfLastThreeMonths = repo.findByDateBetween(StartDate,EndDate);
            for (Rewords rewords : RewordOfLastThreeMonths) {
                RewordSummeryByCustomer rewordSummeryMonthlyByCustomerId = findRewordSummeryMonthlyByCustomerId(rewords.getCustomerId());
                if(all_Customer_RewordSummery_LastThreeMonths.contains(rewordSummeryMonthlyByCustomerId)){
                    continue;
                }
                all_Customer_RewordSummery_LastThreeMonths.add(rewordSummeryMonthlyByCustomerId);
            }
            return all_Customer_RewordSummery_LastThreeMonths;
        }
        catch(NullPointerException e ){
            throw new NullPointerException("Getting summery got into Null Pointer Exception");
        }
        catch (Exception e) {
           throw new FailedToGetRewordSummeryForLastThreeMonth("Unable to generate summery of rewords for last three months");
        }
    }
}